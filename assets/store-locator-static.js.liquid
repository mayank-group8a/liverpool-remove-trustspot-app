/**
 * @extends storeLocator.StaticDataFeed
 * @constructor
 */
function StoreLocatorDataSource() {
  $.extend(this, new storeLocator.StaticDataFeed);

  var that = this;
  $.get("{{ 'LiverpoolUpdateStoreLocatorFile_feed_04-01-23_new1.csv' | file_url }}", function(data) {
    that.setStores(that.parse_(data));
  });
}


/**
 * @return {!storeLocator.FeatureSet}
 */
StoreLocatorDataSource.prototype.getFeatures = function() {
  return this.FEATURES_;
};

/**
 * @private
 * @param {string} csv
 * @return {!Array.<!storeLocator.Store>}
 */
StoreLocatorDataSource.prototype.parse_ = function(csv) {
  var stores = [];
  var parsed = Papa.parse(csv, {
    complete: function(results) {
      //console.log("Finished:", results.data);
    }
  });
  var rows = parsed.data;
  var headings = rows[0];
  $count = 0;
  for (var i = 1, row; row = rows[i]; i++) {
    $count++;
    row = this.toObject_(headings, row);
    
    //var features = new storeLocator.FeatureSet;
    //features.add(this.FEATURES_.getById('Wheelchair-' + row.Wheelchair));
    //features.add(this.FEATURES_.getById('Audio-' + row.Audio));
    var features = '';
    var position = new google.maps.LatLng(row.latitude, row.longitude);
    //console.log(position);
    var locality = this.join_([row.city, row.zipcode, row.state], ', ');

    var store = new storeLocator.Store($count++, position, features, {
      title: row.title,
      address: this.join_([row.address1, row.address2, locality], '<br>')
    });
    stores.push(store);
  }
  //console.log(stores);
  return stores;
};

/**
 * Joins elements of an array that are non-empty and non-null.
 * @private
 * @param {!Array} arr array of elements to join.
 * @param {string} sep the separator.
 * @return {string}
 */
StoreLocatorDataSource.prototype.join_ = function(arr, sep) {
  var parts = [];
  for (var i = 0, ii = arr.length; i < ii; i++) {
    arr[i] && parts.push(arr[i]);
  }
  return parts.join(sep);
};

/**
 * Very rudimentary CSV parsing - we know how this particular CSV is formatted.
 * IMPORTANT: Don't use this for general CSV parsing!
 * @private
 * @param {string} row
 * @return {Array.<string>}
 */
StoreLocatorDataSource.prototype.parseRow_ = function(row) {
  // Strip leading quote.
  if (row.charAt(0) == '"') {
    row = row.substring(1);
  }
  // Strip trailing quote. There seems to be a character between the last quote
  // and the line ending, hence 2 instead of 1.
  if (row.charAt(row.length - 2) == '"') {
    row = row.substring(0, row.length - 2);
  }

  row = row.split('","');

  return row;
};

/**
 * Creates an object mapping headings to row elements.
 * @private
 * @param {Array.<string>} headings
 * @param {Array.<string>} row
 * @return {Object}
 */
StoreLocatorDataSource.prototype.toObject_ = function(headings, row) {
  var result = {};
  for (var i = 0, ii = row.length; i < ii; i++) {
    result[headings[i]] = row[i];
  }
  return result;
};
